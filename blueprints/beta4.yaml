blueprint:
  name: Hybrid Frigate Loiter & Motion Notifications (Option A)
  source_url: "https://raw.githubusercontent.com/m2015agg/HA_Frigate_notifier/main/blueprints/beta4.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Inside that loop we send the first "threshold crossed" notice,
    then wait for updates (or end) and send only changes or the final end. test
    
  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app

    loiter_threshold:
      name: Loiter Threshold (seconds)
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    max_loiter_time:
      name: Maximum Loiter Time (seconds)
      default: 61
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    mqtt_topic:
      name: MQTT Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: ""
      selector:
        text: {}

    zone_settings:
      name: Zone Settings (YAML)
      default: ""
      selector:
        text:
          multiline: true

    timeout:
      name: Update Timeout (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

mode: single

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    id: frigate-new
    value_template: >-
      {% set t = trigger.payload_json.type|default('') %}
      {% set cam = 'camera.' ~ (trigger.payload_json.after.camera|lower) %}
      {{ t in ['new', 'update', 'end'] and cam in (cameras|map('lower')|list) }}

variables:
  payload: "{{ trigger.payload_json }}"
  full_event_id: "{{ payload.after.id }}"
  event_id: "{{ full_event_id[-5:] }}"
  cameras: !input cameras
  notify_device: !input notify_device
  loiter_threshold: !input loiter_threshold
  max_loiter_time: !input max_loiter_time
  base_url: !input base_url
  zone_settings: !input zone_settings
  timeout: !input timeout
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert
  mqtt_topic: !input mqtt_topic
  initial_notification_sent: false
  tracked_labels: []  # Add this to track object labels

  # parse zone_settings into a dict of { zone: {loitering_time: seconds} }
  zone_config: >-
    {% set cfg = {} %}
    {% if zone_settings|trim %}
      {% for line in zone_settings.split('\n') if ':' in line %}
        {% set parts = line.split(':',1) %}
        {% set z = parts[0]|trim %}
        {% set v = parts[1]|trim|int(-1) %}
        {% if v >= 0 %}
          {% set cfg = cfg | combine({z: {'loitering_time': v}}) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ cfg }}

  # Basic event info
  camera_id: "{{ payload.after.camera }}"
  current_zones: "{{ payload.after.current_zones }}"
  entered_zones: "{{ payload.after.entered_zones }}"
  duration: >-
    {{ (payload.after.end_time - payload.after.start_time)|int
       if payload.after.end_time else
       (payload.after.frame_time - payload.after.start_time)|int }}

  # Zone-specific timing check
  zone_alert: >-
    {% set should_alert = false %}
    {% for zone in current_zones %}
      {% if zone in zone_config %}
        {% set threshold = zone_config[zone].loitering_time %}
        {% if threshold >= 0 and duration >= threshold %}
          {% set should_alert = true %}
          {% break %}
        {% endif %}
      {% else %}
        {% if duration >= loiter_threshold %}
          {% set should_alert = true %}
          {% break %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ should_alert }}

  # Only notify if in a zone AND timing threshold met
  should_notify: >-
    {{ current_zones|length > 0 and zone_alert }}

  # Zone timing for current zones
  zone_durations: >-
    {% set durations = {} %}
    {% for zone in current_zones %}
      {% set durations = durations | combine({zone: duration}) %}
    {% endfor %}
    {{ durations }}

action:
  - repeat:
      sequence:
        # 1. On first iteration, send initial notification if threshold is met
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ should_notify }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Event"
                    message: >
                      Attempting notification - Event {{ event_id }} ({{ camera_id }})
                      Device ID: {{ notify_device }}
                      Should Notify: {{ should_notify }}
                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    {% if should_notify %}Loitering detected on {{ camera_id }} – Object has been present for {{ duration }}s.{% else %}Motion detected on {{ camera_id }} – Object has been present for {{ duration }}s.{% endif %}
                  data:
                    tag: "{{ event_id }}"
                    title: "Frigate Detection"
                    image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    actions:
                      - label: "View Live"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      - label: "View Stream"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/master.m3u8"
                - variables:
                    initial_notification_sent: true  # Set this after sending
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert

        # 2. Wait for the next update or final end
        - wait_for_trigger:
            - trigger: mqtt
              topic: "{{ mqtt_topic }}"
              value_template: >-
                {{ trigger.payload_json.after.id == full_event_id
                   and trigger.payload_json.type in ['update','end'] }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # Log if we timed out
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ wait.trigger is none }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Event"
                    message: >
                      Timeout - Event {{ event_id }} ({{ camera_id }})
                      Duration: {{ duration }}s
                      Timeout: {{ timeout }} minutes

        # drop out if we timed out
        - condition: template
          value_template: "{{ wait.trigger is not none }}"

        # 3. Extract the new payload
        - variables:
            update_payload: "{{ wait.trigger.payload_json }}"
            update_type: "{{ update_payload.type }}"
            update_zones: "{{ update_payload.after.current_zones }}"
            update_duration: >-
              {{ (update_payload.after.end_time - update_payload.after.start_time)|int
                 if update_payload.after.end_time else
                 (update_payload.after.frame_time - update_payload.after.start_time)|int }}
            update_loiter_cross: >-
              {% set thr = loiter_threshold %}
              {% for z in update_zones %}
                {% if z in zone_config %}
                  {% set thr = zone_config[z].loitering_time %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {{ update_zones|length > 0 and update_duration >= thr }}
            update_motionless_cross: >-
              {{ update_payload.after.motionless_count is defined 
                 and update_payload.after.motionless_count > 45 }}
            current_labels: "{{ update_payload.after.label }}"
            labels_changed: >-
              {{ current_labels not in tracked_labels }}

        # 4. Notify only on changes or final end
        - choose:
            - conditions:
                - condition: template
                  value_template: >-
                    {% set significant_change = 
                      update_zones != current_zones
                      or labels_changed
                    %}
                    {{ (update_type == 'end' and should_notify and not initial_notification_sent and duration >= loiter_threshold)
                       or significant_change }}
              sequence:
                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    {% if update_type == 'end' %}
                      Event ended on {{ camera_id }} – duration {{ update_duration }}s.
                    {% else %}
                      A {{ current_labels }} {{ 'was detected' }} on the {{ camera_id }} camera.
                    {% endif %}
                  data:
                    tag: "{{ event_id }}"
                    title: "Frigate Detection Update"
                    image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    actions:
                      - label: "View Live"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      - label: "View Stream"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/master.m3u8"
                - variables:
                    initial_notification_sent: true  # Set this after sending
                    tracked_labels: "{{ tracked_labels + [current_labels] if current_labels not in tracked_labels else tracked_labels }}"
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                - service: logbook.log
                  data:
                    name: "Frigate Event"
                    message: >
                      Update notification sent - Event {{ event_id }} ({{ camera_id }})
                      Type: {{ update_type }}
                      Duration: {{ update_duration }}s
                      Changes: {% if update_zones != current_zones %}zones{% endif %}
                              {% if labels_changed %}object{% endif %}
      # 5. Stop looping once Frigate sends the "end" for this event or times out
      until: >-
        {% if wait.trigger is none %}
          true
        {% else %}
          {{ wait.trigger.payload_json.type == 'end' }}
        {% endif %}
  - service: logbook.log
    data:
      name: "Frigate Event"
      message: >
        Completed - Event {{ event_id }} ({{ camera_id }})
        Final duration: {{ duration }}s
        Reason: {% if wait.trigger is none %}Timeout{% else %}End event{% endif %}
        Loitering: {{ zone_alert }}
        Motionless: {{ zone_alert }}
