blueprint:
  name: Frigate Presence Detection Notifications
  source_url: "https://raw.githubusercontent.com/m2015agg/HA_Frigate_notifier/main/blueprints/beta4.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Only notify when an object is detected in a zone and remains there for the specified presence time.
    This prevents notifications for quick pass-throughs and only alerts for sustained presence.

  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app

    presence_time:
      name: Presence Time (seconds)
      description: How long an object must be present in a zone before triggering a notification
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    mqtt_topic:
      name: MQTT Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: ""
      selector:
        text: {}

    zone_settings:
      name: Zone Settings (YAML)
      default: ''
      selector:
        text:
          multiline: true
          multiple: false

    timeout:
      name: Update Timeout (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

mode: single

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    id: frigate-new
    value_template: >-
      {% set t = trigger.payload_json.type|default('') %}
      {% set cam = 'camera.' ~ (trigger.payload_json.after.camera|lower) %}
      {{ t in ['new', 'update', 'end'] and cam in (cameras|map('lower')|list) }}

variables:
  payload: "{{ trigger.payload_json }}"
  full_event_id: "{{ payload.after.id }}"
  event_id: "{{ full_event_id[-5:] }}"
  cameras: !input cameras
  notify_device: !input notify_device
  presence_time: !input presence_time
  base_url: !input base_url
  zone_settings: !input zone_settings
  timeout: !input timeout
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert
  mqtt_topic: !input mqtt_topic
  initial_notification_sent: false

  # parse zone_settings into a dict of { zone: {presence_time: seconds} }
  zone_config: >-
    {% set cfg = {
      'street': {'presence_time': 5},
      'garage': {'presence_time': 4},
      'yard': {'presence_time': 1}
    } %}
    {{ cfg }}

  # Basic event info
  camera_id: "{{ payload.after.camera }}"
  current_zones: "{{ payload.after.data.zones if payload.after.data is defined and payload.after.data.zones is defined else [] }}"
  duration: >-
    {{ (payload.after.end_time - payload.after.start_time)|int
      if payload.after.end_time else
      (now().timestamp()|int - payload.after.start_time|int) }}

  # Check if object has been present long enough in any zone
  should_notify: >-
    {% set duration = duration|int %}
    {% set presence_time = presence_time|int %}
    {% set should_alert = false %}
    {% for zone in current_zones %}
      {% if zone in zone_config %}
        {% set threshold = zone_config[zone].presence_time|int %}
        {% if threshold >= 0 and duration >= threshold %}
          {% set should_alert = true %}
          {% break %}
        {% endif %}
      {% else %}
        {% if duration >= presence_time %}
          {% set should_alert = true %}
          {% break %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ current_zones|length > 0 and should_alert }}

action:
  - repeat:
      sequence:
        # Re-evaluate current state
        - variables:
            current_duration: >-
              {{ (payload.after.end_time - payload.after.start_time)|int
                if payload.after.end_time else
                (now().timestamp()|int - payload.after.start_time|int) }}
            current_zones: "{{ payload.after.data.zones if payload.after.data is defined and payload.after.data.zones is defined else [] }}"
            current_should_notify: >-
              {% set duration = current_duration|int %}
              {% set pt = presence_time|int %}
              {% set alert = false %}
              {% for zone in current_zones %}
                {% if zone in zone_config %}
                  {% set t = zone_config[zone].presence_time|int %}
                  {% if duration >= t %}
                    {% set alert = true %}
                    {% break %}
                  {% endif %}
                {% else %}
                  {% if current_duration >= pt %}
                    {% set alert = true %}
                    {% break %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {{ current_zones|length > 0 and alert }}

        # Send notification if conditions are met
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ current_should_notify }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Event"
                    message: >-
                      Event {{ event_id }} ({{ camera_id }})
                      Type: {{ payload.type }}
                      Duration: {{ current_duration }}s
                      Objects: {{ payload.after.data.objects|join(', ') }}
                      Zones: {{ current_zones|join(', ') }}
                      Notification sent: {{ initial_notification_sent }}
                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    Presence detected on {{ camera_id }} â€“ Object has been present for {{ current_duration }}s.
                  data:
                    tag: "{{ event_id }}"
                    title: "Frigate Presence Detection"
                    image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    actions:
                      - label: "View Live"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      - label: "View Stream"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/master.m3u8"
                - variables:
                    initial_notification_sent: true
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert

        # Wait for the next update or final end
        - wait_for_trigger:
            - trigger: mqtt
              topic: "{{ mqtt_topic }}"
              value_template: >-
                {{ trigger.payload_json.after.id == full_event_id
                  and trigger.payload_json.type in ['update','end'] }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # Log if we timed out
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ wait.trigger is none }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Event"
                    message: >
                      Timeout - Event {{ event_id }} ({{ camera_id }})
                      Duration: {{ duration }}s
                      Timeout: {{ timeout }} minutes
                      loopTime: {{ current_duration}}s

        # Stop if we timed out
        - condition: template
          value_template: "{{ wait.trigger is not none }}"

        # Update variables with new payload
        - variables:
            payload: "{{ wait.trigger.payload_json }}"
            current_duration: >-
              {{ (payload.after.end_time - payload.after.start_time)|int
                if payload.after.end_time else
                (now().timestamp()|int - payload.after.start_time|int) }}
            current_zones: "{{ payload.after.data.zones if payload.after.data is defined and payload.after.data.zones is defined else [] }}"
            current_should_notify: >-
              {% set duration = current_duration|int %}
              {% set pt = presence_time|int %}
              {% set alert = false %}
              {% for zone in current_zones %}
                {% if zone in zone_config %}
                  {% set t = zone_config[zone].presence_time|int %}
                  {% if duration >= t %}
                    {% set alert = true %}
                    {% break %}
                  {% endif %}
                {% else %}
                  {% if duration >= pt %}
                    {% set alert = true %}
                    {% break %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {{ current_zones|length > 0 and alert }}

      # Stop looping once Frigate sends the "end" for this event or times out
      until: >-
        {% if wait.trigger is none %}
          true
        {% else %}
          {{ wait.trigger.payload_json.type == 'end' }}
        {% endif %}

  # Log completion
  - service: logbook.log
    data:
      name: "Frigate Event"
      message: >
        Completed - Event {{ event_id }} ({{ camera_id }})
        Final duration: {{ duration }}s
        Reason: {% if wait.trigger is none %}Timeout{% else %}End event{% endif %}
