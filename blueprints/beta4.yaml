blueprint:
  name: Hybrid Frigate Loiter & Motion Notifications (Option A)
  source_url: "https://rttaw.githubusercontent.com/m2015agg/HA_Frigate_notifier/main/blueprints/beta4.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Inside that loop we send the first "threshold crossed" notice,
    then wait for updates (or end) and send only changes or the final end. test
    
  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain:
            - camera
          multiple: true

    notify_device:
      name: Mobile Device
      selector:
        device:
          filter:
            integration: mobile_app

    loiter_threshold:
      name: Loiter Threshold (seconds)
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    max_loiter_time:
      name: Maximum Loiter Time (seconds)
      default: 61
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    mqtt_topic:
      name: MQTT Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: ""
      selector:
        text: {}

    zone_settings:
      name: Zone Settings (YAML)
      default: ""
      selector:
        text:
          multiline: true

    timeout:
      name: Update Timeout (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

mode: single

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    id: frigate-new
    value_template: >-
      {% set t = value_json.type|default('') %}
      {% set cam = 'camera.' ~ (value_json.after.camera|lower) %}
      {{ t == 'new' and cam in (cameras|map('lower')|list) }}

variables:
  payload: "{{ trigger.payload_json }}"
  full_event_id: "{{ payload.after.id }}"
  event_id: "{{ full_event_id[-5:] }}"
  cameras: !input cameras
  notify_device: !input notify_device
  loiter_threshold: !input loiter_threshold
  max_loiter_time: !input max_loiter_time
  base_url: !input base_url
  zone_settings: !input zone_settings
  timeout: !input timeout
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert

  # parse zone_settings into a dict of { zone: {loitering_time: seconds} }
  zone_config: >-
    {% set cfg = {} %}
    {% if zone_settings|trim %}
      {% for line in zone_settings.split('\n') if ':' in line %}
        {% set parts = line.split(':',1) %}
        {% set z = parts[0]|trim %}
        {% set v = parts[1]|trim|int(-1) %}
        {% if v >= 0 %}
          {% set cfg = cfg | combine({z: {'loitering_time': v}}) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ cfg }}

  # initial values from the "new" payload
  camera_id: "{{ payload.after.camera }}"
  current_zones: "{{ payload.after.current_zones }}"
  entered_zones: "{{ payload.after.entered_zones }}"
  duration: >-
    {{ (payload.after.end_time - payload.after.start_time)|int
       if payload.after.end_time else
       (payload.after.frame_time - payload.after.start_time)|int }}
  loiter_cross: >-
    {% set thr = loiter_threshold %}
    {% for z in current_zones %}
      {% if z in zone_config %}
        {% set thr = zone_config[z].loitering_time %}
        {% break %}
      {% endif %}
    {% endfor %}
    {{ current_zones|length > 0
       and duration >= thr
       and (max_loiter_time == 0 or duration <= max_loiter_time) }}

  should_notify: "{{ loiter_cross }}"

action:
  - repeat:
      sequence:
        # 1. On first iteration, send initial notification if threshold is met
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ should_notify }}"
                - condition: template
                  value_template: "{{ states('sensor.frigate_snapshot_available') == 'true' }}"
              sequence:
                - service: notify.mobile_app
                  data:
                    message: >-
                      Motion detected on {{ camera_id }} – Object has been present for {{ duration }}s.
                    target:
                      - !input notify_device
                    data:
                      tag: "{{ event_id }}"
                      image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                      clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      importance: high
                      priority: high
                      critical: "{{ critical_alert }}"
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                - stop: "Exit loop after first notification"

        # 2. Wait for the next update or final end
        - wait_for_trigger:
            - trigger: mqtt
              topic: "{{ mqtt_topic }}"
              value_template: >-
                {{ value_json.after.id == full_event_id
                   and value_json.type in ['update','end'] }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # drop out if we timed out
        - condition: template
          value_template: "{{ wait.trigger is not none }}"

        # 3. Extract the new payload
        - variables:
            update_payload: "{{ wait.trigger.payload_json }}"
            update_type: "{{ update_payload.type }}"
            update_zones: "{{ update_payload.after.current_zones }}"
            update_duration: >-
              {{ (update_payload.after.end_time - update_payload.after.start_time)|int
                 if update_payload.after.end_time else
                 (update_payload.after.frame_time - update_payload.after.start_time)|int }}
            update_loiter_cross: >-
              {% set thr = loiter_threshold %}
              {% for z in update_zones %}
                {% if z in zone_config %}
                  {% set thr = zone_config[z].loitering_time %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {{ update_zones|length > 0 and update_duration >= thr }}

        # 4. Notify only on changes or final end
        - choose:
            - conditions:
                - condition: template
                  value_template: >-
                    {{ update_type == 'end'
                       or update_zones != current_zones
                       or update_loiter_cross != loiter_cross
                       or update_duration != duration }}
                - condition: template
                  value_template: "{{ states('sensor.frigate_snapshot_available') == 'true' }}"
              sequence:
                - service: notify.mobile_app
                  data:
                    message: >-
                      {% if update_type == 'end' %}
                        Event ended on {{ camera_id }} – duration {{ update_duration }}s.
                      {% else %}
                        Update on {{ camera_id }}:
                        {% if update_loiter_cross != loiter_cross %}
                          Loitering status changed.
                        {% endif %}
                        {% if update_zones != current_zones %}
                          Zones now: {{ update_zones | join(', ') }}.
                        {% endif %}
                        Duration: {{ update_duration }}s.
                      {% endif %}
                    target:
                      - !input notify_device
                    data:
                      tag: "{{ event_id }}"
                      image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                      clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      importance: high
                      priority: high
                      critical: "{{ critical_alert }}"
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert

      # 5. Stop looping once Frigate sends the "end" for this event
      until: "{{ wait.trigger.payload_json.type == 'end' }}"
