blueprint:
  name: Hybrid Frigate Loiter & Motion Notifications (Option A – Inside Loop + Cooldown)
  description: >
    Notify via mobile_app and optionally HomeKit when an object
    loiters or stays motionless per thresholds, with **all** notifications
    handled inside a loop and a UI-configurable cooldown between sends.
  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      selector:
        device:
          filter:
            integration: mobile_app

    loiter_threshold:
      name: Loiter Threshold (seconds)
      description: Seconds before Frigate’s `pending_loitering` will notify
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    motionless_threshold:
      name: Motionless Threshold (seconds)
      description: Seconds an object must remain still to notify
      default: 30
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    max_loiter_time:
      name: Maximum Loiter Time (seconds)
      description: >
        Maximum time to consider an object as loitering (0 = no max).
      default: 0
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    mqtt_topic:
      name: MQTT Topic
      description: Where Frigate publishes events (usually `frigate/events`)
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      description: External URL for snapshots & clips (no trailing slash)
      default: ""
      selector:
        text: {}

    zone_settings:
      name: Zone-specific Loiter Times (YAML)
      description: |
        Optional mapping of `zone_name:seconds`, one per line.
      default: ""
      selector:
        text:
          multiline: true

    timeout:
      name: Update Timeout (minutes)
      description: How long to wait for updates before exiting loop
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    cooldown:
      name: Notification Cooldown (minutes)
      description: >
        Minimum minutes to wait **after** sending a notification before
        sending another one for the **same** event.
      default: 5
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      description: Toggle per-camera HomeKit boolean flips
      default: false
      selector:
        boolean: {}

    critical_alert:
      name: Critical Notifications
      description: Bypass Do Not Disturb on mobile devices
      default: false
      selector:
        boolean: {}

mode: single

trigger:
  - platform: mqtt
    topic: !input mqtt_topic
    id: new_event
    value_template: "{{ value_json.type == 'new' }}"

variables:
  payload: "{{ trigger.payload_json }}"
  full_event_id: "{{ payload.after.id }}"
  event_id: "{{ full_event_id[-5:] }}"
  camera_id: "{{ payload.after.camera }}"
  cameras: !input cameras
  notify_device: !input notify_device
  loiter_threshold: !input loiter_threshold
  motionless_threshold: !input motionless_threshold
  max_loiter_time: !input max_loiter_time
  mqtt_topic: !input mqtt_topic
  base_url: !input base_url
  zone_settings: !input zone_settings
  timeout: !input timeout
  cooldown: !input cooldown
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert

  # Parse zone_settings into a dict { zone: { loiter: seconds } }
  zone_config: >-
    {% set cfg = {} %}
    {% for line in zone_settings.split('\n') if ':' in line %}
      {% set parts = line.split(':',1) %}
      {% set name = parts[0].strip() %}
      {% set secs = parts[1].strip()|int(0) %}
      {% if secs >= 0 %}{% set _ = cfg.update({name:{'loiter':secs}}) %}{% endif %}
    {% endfor %}
    {{ cfg }}

  # Only run if this camera is in your list
  is_watched_camera: >-
    {{ ('camera.' ~ camera_id | lower)
       in (cameras | map('lower') | list) }}

action:
  - condition: template
    value_template: "{{ is_watched_camera }}"
  - repeat:
      sequence:
        # 1) Wait for the next update or final “end” for this same event
        - wait_for_trigger:
            triggers:
              - platform: mqtt
                topic: "{{ mqtt_topic }}"
                value_template: >
                  {{ value_json.after.id == full_event_id 
                     and value_json.type in ['update','end'] }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # 2) Re-extract everything from that update
        - variables:
            upd: "{{ wait.trigger.payload_json }}"
            upd_type: "{{ upd.type }}"
            start_t: "{{ upd.after.start_time }}"
            end_t: "{{ upd.after.end_time }}"
            frame_t: "{{ upd.after.frame_time }}"
            duration: >-
              {{ (end_t - start_t)|int 
                 if end_t is defined 
                 else (frame_t - start_t)|int }}
            zones: "{{ upd.after.current_zones }}"
            # Override threshold if inside a custom zone
            zone_threshold: >-
              {% set th = loiter_threshold %}
              {% for z in zones if z in zone_config %}
                {% set th = zone_config[z].loiter %}
                {% break %}
              {% endfor %}
              {{ th }}
            loiter_cross: >-
              {{ duration >= zone_threshold 
                 and (max_loiter_time == 0 or duration <= max_loiter_time) }}
            motionless_cross: "{{ duration >= motionless_threshold }}"

        # 3) If we’ve crossed a threshold—or the event just ended—notify
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ loiter_cross 
                       or motionless_cross 
                       or upd_type == 'end' }}
              sequence:
                # ► Mobile App notification
                - service: mobile_app.notify
                  data:
                    device_id: "{{ notify_device }}"
                    message: >
                      {% if upd_type == 'end' %}
                        Event ended on {{ camera_id }} – total {{ duration }}s.
                      {% else %}
                        {% if loiter_cross %}
                          Loitering detected on {{ camera_id }} – {{ duration }}s.
                        {% else %}
                          Stationary object on {{ camera_id }} – {{ duration }}s.
                        {% endif %}
                      {% endif %}
                    data:
                      tag: "{{ event_id }}"
                      image: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/snapshot.jpg"
                      clickAction: "{{ base_url }}/api/frigate/notifications/{{ full_event_id }}/clip.mp4"
                      importance: >
                        {% if upd_type == 'end' %}low{% else %}high{% endif %}
                      priority: >
                        {% if upd_type == 'end' %}low{% else %}high{% endif %}
                      critical: "{{ critical_alert }}"

                # ► HomeKit toggle (if enabled)
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ camera_id|lower }}_alert

                # ► Honor your cooldown before checking again
                - delay:
                    minutes: "{{ cooldown }}"

      # 4) Exit the loop once Frigate sends the “end” message
      until: "{{ upd_type == 'end' }}"