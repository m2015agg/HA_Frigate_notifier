blueprint:
  name: Frigate Presence Detection Notifications Hardcoded
  source_url: "https://github.com/m2015agg/HA_Frigate_notifier/blob/main/blueprints/beta5.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Only notify when an object is detected in a zone and remains there for the specified presence time.
    This prevents notifications for quick pass-throughs and only alerts for sustained presence.
    # Version 1.0.0 (2024-05-07)
    # Updated: Added robust event checks and detailed debug logging

  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app

    mqtt_review_topic:
      name: Review Topic
      default: frigate/reviews
      selector:
        text: {}

    mqtt_event_topic:
      name: Event Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: "https://nipu0uvuj0g8ngrg0sv9ekt1mihje4uo.ui.nabu.casa"
      selector:
        text: {}

    timeout:
      name: Update Timeout (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

# Run automation in parallel mode
mode: parallel

# Trigger on MQTT updates from Frigate
# This trigger listens to frigate/reviews for new events
trigger:
  - platform: mqtt
    topic: !input mqtt_review_topic
    value_template: >
      {{ trigger.payload_json.type == 'new' }}

# Variables used in the automation
variables:
  # Extract data from the MQTT payload frigate/reviews
  review_payload: "{{ trigger.payload_json }}"
  review_full_event_id: "{{ review_payload.after.id }}"
  review_camera_id: "{{ review_payload.after.camera }}"

  # Get input variables
  cameras: !input cameras
  notify_device: !input notify_device
  base_url: !input base_url
  timeout: !input timeout
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert
  mqtt_event_topic: !input mqtt_event_topic
  initial_notification_sent: false

  # Event data from frigate/events
  e: "{{ trigger.payload_json.after }}"

action:
  - service: logbook.log
    data:
      name: "Frigate Debug - Initial Review Event"
      message: >
        Review Event: {{ review_full_event_id }}
        Camera: {{ review_camera_id }}

  - repeat:
      sequence:
        # Wait for matching frigate/events message
        - service: logbook.log
          data:
            name: "Frigate Debug - Waiting for Event"
            message: >
              Waiting for event ID: {{ review_full_event_id }}
              On topic: {{ mqtt_event_topic }}

        - wait_for_trigger:
            - platform: mqtt
              topic: "frigate/events"
              value_template: >
                {% set e = trigger.payload_json.after %}
                {{ e.id == review_full_event_id }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # Update variables with latest event data
        - variables:
            e: "{{ trigger.payload_json.after }}"
            has_pending: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.pending_loitering is defined and trigger.payload_json.after.pending_loitering }}
              {% else %}
                false
              {% endif %}
            has_zones: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.entered_zones is defined and trigger.payload_json.after.entered_zones|length > 0 }}
              {% else %}
                false
              {% endif %}
            has_clip: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.has_clip is defined and trigger.payload_json.after.has_clip }}
              {% else %}
                false
              {% endif %}
            has_snapshot: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.has_snapshot is defined and trigger.payload_json.after.has_snapshot }}
              {% else %}
                false
              {% endif %}
            is_active: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.active is defined and trigger.payload_json.after.active }}
              {% else %}
                false
              {% endif %}
            has_severity: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ trigger.payload_json.after.max_severity is defined and trigger.payload_json.after.max_severity == 'alert' }}
              {% else %}
                false
              {% endif %}
            should_notify: >-
              {% if trigger is not none and trigger.payload_json.after is defined %}
                {{ not initial_notification_sent and 
                   trigger.payload_json.after.max_severity is defined and 
                   trigger.payload_json.after.max_severity == 'alert' and 
                   ((trigger.payload_json.after.entered_zones is defined and trigger.payload_json.after.entered_zones|length > 0) or 
                    (trigger.payload_json.after.pending_loitering is defined and trigger.payload_json.after.pending_loitering)) }}
              {% else %}
                false
              {% endif %}

        # Log what we received
        - service: logbook.log
          data:
            name: "Frigate Debug - Event Received"
            message: >
              {% if trigger is not none %}
                Received event: {{ trigger.payload_json.after.id }}
                Expected: {{ review_full_event_id }}
                Matches: {{ trigger.payload_json.after.id == review_full_event_id }}
                Raw payload: {{ trigger.payload_json | to_json }}
                Conditions:
                - Initial notification not sent: {{ not initial_notification_sent }}
                - Has severity: {{ has_severity }}
                - Has zones: {{ has_zones }}
                - Has pending: {{ has_pending }}
                - Has clip: {{ has_clip }}
                - Has snapshot: {{ has_snapshot }}
                - Is active: {{ is_active }}
                Final decision: {{ should_notify }}
              {% else %}
                No event received before timeout
              {% endif %}

        # Check if we should send notification
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ should_notify }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Debug - Condition Check"
                    message: >
                      {% set e = trigger.payload_json.after %}
                      {% set has_pending = e.pending_loitering is defined and e.pending_loitering %}
                      {% set has_zones = e.entered_zones is defined and e.entered_zones|length > 0 %}
                      {% set has_clip = e.has_clip is defined and e.has_clip %}
                      {% set has_snapshot = e.has_snapshot is defined and e.has_snapshot %}
                      {% set is_active = e.active is defined and e.active %}
                      {% set has_severity = e.max_severity is defined and e.max_severity == 'alert' %}
                      Event {{ review_full_event_id }} ({{ review_camera_id }})
                      Object: {{ e.label }} ({{ e.sub_label }})
                      Conditions:
                      - Initial notification not sent: {{ not initial_notification_sent }}
                      - Has severity: {{ has_severity }}
                      - Has zones: {{ has_zones }}
                      - Has pending: {{ has_pending }}
                      - Has clip: {{ has_clip }}
                      - Has snapshot: {{ has_snapshot }}
                      - Is active: {{ is_active }}
                      Final decision: {{ not initial_notification_sent and has_severity and (has_zones or has_pending) }}

                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    {% set e = trigger.payload_json.after %}
                    {% if not initial_notification_sent %}
                      A {{ e.label | title }} was detected on {{ review_camera_id }}.
                    {% else %}
                      Additional object(s) detected: {{ new_objects | join(", ") | title }} on {{ review_camera_id }}.
                    {% endif %}
                  data:
                    tag: "{{ review_full_event_id }}"
                    title: "Frigate Detection"
                    image: "{{ base_url }}/api/frigate/notifications/{{ e.id }}/thumbnail.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ review_full_event_id }}/clip.mp4"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ review_full_event_id }}/clip.mp4"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    when: "{{ e.start_time|int }}"
                    entity_id: "camera.{{ review_camera_id | replace('-','_') | lower }}"
                    actions:
                      - label: "Open Frigate Dashboard"
                        title: "Open Frigate Dashboard"
                        action: "URI"
                        uri: "{{ base_url }}/api/hassio_ingress/frigate"
                      - label: "View Clip"
                        title: "View Clip"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ review_full_event_id }}/clip.mp4"

                - variables:
                    initial_notification_sent: true

                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ review_camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ review_camera_id|lower }}_alert

      until: >-
        {% if trigger is none %}
          true
        {% elif initial_notification_sent %}
          true
        {% else %}
          {{ trigger.payload_json.type == 'end' }}
        {% endif %}
