blueprint:
  name: Frigate Presence Detection Notifications Hardcoded
  source_url: "https://raw.githubusercontent.com/m2015agg/HA_Frigate_notifier/main/blueprints/beta5.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Only notify when an object is detected in a zone and remains there for the specified presence time.
    This prevents notifications for quick pass-throughs and only alerts for sustained presence.

  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app

    presence_time:
      name: Presence Time (seconds)
      description: How long an object must be present in a zone before triggering a notification
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    mqtt_review_topic:
      name: Review Topic
      default: frigate/reviews
      selector:
        text: {}

    mqtt_event_topic:
      name: Event Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: "https://nipu0uvuj0g8ngrg0sv9ekt1mihje4uo.ui.nabu.casa"
      selector:
        text: {}

    timeout:
      name: Update Timeout (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

# Run automation in parallel mode
mode: parallel

# Trigger on MQTT updates from Frigate
# This trigger listens to frigate/reviews for new events
trigger:
  - platform: mqtt
    topic: !input mqtt_review_topic
    value_template: >
      {{ trigger.payload_json.type == 'new' }}

# Variables used in the automation
variables:
  # Extract data from the MQTT payload frigate/reviews
  review_payload: "{{ trigger.payload_json }}"
  review_full_event_id: "{{ review_payload.after.id }}"
  review_camera_id: "{{ review_payload.after.camera }}"  
  
  # Get input variables
  cameras: !input cameras
  notify_device: !input notify_device
  presence_time: !input presence_time
  base_url: !input base_url
  timeout: !input timeout
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert
  mqtt_event_topic: !input mqtt_event_topic
  initial_notification_sent: false

  # Event topic evaluation variables frigate/events
  event_full_event_id:    "{{ review_full_event_id }}"
  event_camera_id:        "{{ review_camera_id }}"
  event_entered_zones:    []
  event_pending_loitering: false
  event_has_clip:         false
  event_has_snapshot:     false

action:
  - service: logbook.log
    data:
      name: "Frigate Debug - Initial State"
      message: >
        Event: {{ review_full_event_id }}
        Camera: {{ review_camera_id }}

  - repeat:
      sequence:
        # Re-evaluate current state
        - variables:
            event_full_event_id: >-
              {{ trigger.payload_json.after.id }}
            event_camera_id: >-
              {{ trigger.payload_json.after.camera }}
            event_entered_zones: >-
              {{ trigger.payload_json.after.entered_zones }}
            event_pending_loitering: >-
              {{ trigger.payload_json.after.pending_loitering }}
            event_has_clip: >-
              {{ trigger.payload_json.after.has_clip }}
            event_has_snapshot: >-
              {{ trigger.payload_json.after.has_snapshot }}
            current_should_notify: >-
              {% set e = trigger.payload_json.after %}
              {{ e.pending_loitering and e.entered_zones and e.has_clip and e.has_snapshot }}

        - service: logbook.log
          data:
            name: "Frigate Debug - Loop State"
            message: >
              Event: {{ event_full_event_id }}
              Camera: {{ event_camera_id }}
              Should Notify: {{ current_should_notify }}
              Initial Notification Sent: {{ initial_notification_sent }}
              Event ID: {{ event_full_event_id }}
              Event Camera: {{ event_camera_id }}
              Pending Loitering: {{ event_pending_loitering }}
              Entered Zones: {{ event_entered_zones }}
              Has Clip: {{ event_has_clip }}
              Has Snapshot: {{ event_has_snapshot }}

        # Send notification if conditions are met
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ (not initial_notification_sent and 
                        event_pending_loitering and 
                        event_entered_zones and 
                        event_has_clip and 
                        event_has_snapshot) }}
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Debug - Sending Notification"
                    message: >-
                      Event {{ event_full_event_id }} ({{ event_camera_id }})
                      Pending Loitering: {{ event_pending_loitering }}
                      Entered Zones: {{ event_entered_zones }}
                      Has Clip: {{ event_has_clip }}
                      Has Snapshot: {{ event_has_snapshot }}
                      Notification sent: {{ initial_notification_sent }}
                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    {% if not initial_notification_sent %}
                      A {{ payload.after.data.objects | sort | join(", ") | title }} was detected on {{ event_camera_id }}.
                    {% else %}
                      Additional object(s) detected: {{ new_objects | join(", ") | title }} on {{ event_camera_id }}.
                    {% endif %}
                  data:
                    tag: "{{ event_full_event_id }}"
                    title: "Frigate Detection"
                    image: "{{ base_url }}/api/frigate/notifications/{{ payload.after.data.detections[0] }}/thumbnail.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ event_full_event_id }}/clip.mp4"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ event_full_event_id }}/clip.mp4"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    when: "{{ payload.after.start_time|int }}"
                    entity_id: "camera.{{ event_camera_id | replace('-','_') | lower }}"
                    actions:
                      - label: "Open Frigate Dashboard"
                        title: "Open Frigate Dashboard"
                        action: "URI"
                        uri: "{{ base_url }}/api/hassio_ingress/frigate"
                      - label: "View Clip"
                        title: "View Clip"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ event_full_event_id }}/clip.mp4"
                - variables:
                    initial_notification_sent: true
                    notified_objects: "{{ notified_objects + new_objects }}"
                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ event_camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ event_camera_id|lower }}_alert

        # Wait for the matching frigate/events message
        - service: logbook.log
          data:
            name: "Frigate Debug - Waiting for Event"
            message: >
              Waiting for event ID: {{ review_full_event_id }}
              On topic: {{ mqtt_event_topic }}

        - wait_for_trigger:
            - platform: mqtt
              topic: "{{ mqtt_event_topic }}"
              value_template: >-
                {% set e = trigger.payload_json.after %}
                {% set matches = e.id == review_full_event_id %}
                {{ matches }}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # Log what we received (or didn't receive)
        - service: logbook.log
          data:
            name: "Frigate Debug - Event Received"
            message: >-
              {% if trigger is not none %}
                Received event: {{ trigger.payload_json.after.id }}
                Expected: {{ review_full_event_id }}
                Matches: {{ trigger.payload_json.after.id == review_full_event_id }}
              {% else %}
                No event received before timeout
              {% endif %}

        # After we get a matching event, then check the other conditions
        - condition: template
          value_template: >-
            {% set e = trigger.payload_json.after %}
            {{ e.pending_loitering
               and (e.entered_zones | length) > 0
               and e.has_clip
               and e.has_snapshot }}

        # Pull the real event fields into our event_* vars
        - variables:
            event_full_event_id: "{{ trigger.payload_json.after.id }}"
            event_camera_id: "{{ trigger.payload_json.after.camera }}"
            event_entered_zones: "{{ trigger.payload_json.after.entered_zones }}"
            event_pending_loitering: "{{ trigger.payload_json.after.pending_loitering }}"
            event_has_clip: "{{ trigger.payload_json.after.has_clip }}"
            event_has_snapshot: "{{ trigger.payload_json.after.has_snapshot }}"
            current_should_notify: >-
              {% set e = trigger.payload_json.after %}
              {{ e.pending_loitering and e.entered_zones and e.has_clip and e.has_snapshot }}

        # (Optional) log what you just received
        - service: logbook.log
          data:
            name: "Frigate Debug – Event Vars"
            message: >
              Event ID: {{ event_full_event_id }}
              Camera:  {{ event_camera_id }}
              Entered Zones: {{ event_entered_zones }}
              Pending Loitering: {{ event_pending_loitering }}
              Has Clip: {{ event_has_clip }}
              Has Snapshot: {{ event_has_snapshot }}

        # Stop if we timed out
        - condition: template
          value_template: "{{ trigger is not none }}"
      until: >-
        {% if trigger is none %}
          true
        {% elif initial_notification_sent %}
          true
        {% else %}
          {{ trigger.payload_json.type == 'end' }}
        {% endif %}