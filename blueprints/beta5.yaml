blueprint:
  name: Frigate Presence Detection Notifications Hardcoded
  source_url: "https://github.com/m2015agg/HA_Frigate_notifier/blob/main/blueprints/beta5.yaml"
  description: >
    Spawn a single loop on each new Frigate event for watched cameras.
    Only notify when an object is detected in a zone and remains there for the specified presence time.
    This prevents notifications for quick pass-throughs and only alerts for sustained presence.
    # Version 1.4.0 (2024-05-07)
    # Updated: Modified notification behavior
    # - Changed tap action to open thumbnail
    # - Simplified notification actions
    # - Improved notification interaction
    # Updated: Added event path handling
    # - Uses Frigate's event path for notifications
    # - Fallback to event ID if path missing
    # - Consistent path usage for snapshots and clips
    # Updated: Added camera validation for snapshots
    # - Ensures snapshot camera matches event camera
    # - Prevents incorrect snapshots in notifications
    # - Added detailed camera validation logging
    # Updated: Added cooldown period after notifications
    # - Configurable cooldown time (0-30 minutes)
    # - Automation ends after cooldown completes
    # - Improved end conditions for better control
    # Updated: Added robust event checks and detailed debug logging

  domain: automation
  input:
    cameras:
      name: Cameras
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app

    mqtt_review_topic:
      name: Review Topic
      default: frigate/reviews
      selector:
        text: {}

    mqtt_event_topic:
      name: Event Topic
      default: frigate/events
      selector:
        text: {}

    base_url:
      name: Home Assistant URL
      default: "https://nipu0uvuj0g8ngrg0sv9ekt1mihje4uo.ui.nabu.casa"
      selector:
        text: {}

    timeout:
      name: Update Timeout (minutes)
      default: 1
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    cooldown:
      name: Cooldown Period (minutes)
      description: Time to wait after sending a notification before ending the automation
      default: 1
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: minutes

    enable_homekit:
      name: Enable HomeKit Alerts
      default: true
      selector:
        boolean: {}

    critical_alert:
      name: Enable Critical Alerts
      default: false
      selector:
        boolean: {}

    automation_mode:
      name: Automation Mode
      description: Choose how the automation handles multiple events
      default: parallel
      selector:
        select:
          options:
            - parallel
            - single
            - queued
          translation_key: automation_mode

# Run automation in selected mode
mode: !input automation_mode

# Trigger on MQTT updates from Frigate
# This trigger listens to frigate/reviews for new events
trigger:
  - platform: mqtt
    topic: !input mqtt_review_topic
    value_template: >
      {{ trigger.payload_json.type == 'new' }}

# Variables used in the automation
variables:
  # Extract data from the MQTT payload frigate/reviews
  review_payload: "{{ trigger.payload_json }}"
  review_full_event_id: "{{ review_payload.after.id }}"
  review_camera_id: "{{ review_payload.after.camera }}"

  # Get input variables
  cameras: !input cameras
  notify_device: !input notify_device
  base_url: !input base_url
  timeout: !input timeout
  cooldown: !input cooldown
  enable_homekit: !input enable_homekit
  critical_alert: !input critical_alert
  mqtt_event_topic: !input mqtt_event_topic
  initial_notification_sent: false
  notification_time: null

  # Event data from frigate/events
  e: "{{ trigger.payload_json.after }}"

action:
  - service: logbook.log
    data:
      name: "Frigate Debug - Initial Review Event"
      message: >
        Review Event: {{ review_full_event_id }}
        Camera: {{ review_camera_id }}

  - repeat:
      sequence:

        # 1) Log that we're waiting for the matching event
        - service: logbook.log
          data:
            name: "Frigate Debug - Waiting for Event"
            message: >
              Waiting for event ID: {{ review_full_event_id }}
              On topic: {{ mqtt_event_topic }}

        # 2) Block until we see the frigate/events message with the same ID
        - wait_for_trigger:
            - platform: mqtt
              topic: "{{ mqtt_event_topic }}"
              value_template: >-
                {% if initial_notification_sent %}
                  false
                {% else %}
                  {% set e = trigger.payload_json.after %}
                  {{ e.id == review_full_event_id }}
                {% endif %}
          timeout:
            minutes: "{{ timeout }}"
          continue_on_timeout: false

        # 3) Now pull the real event fields into local vars
        - variables:
            e: "{{ wait.trigger.payload_json.after }}"
            has_pending: "{{ e.pending_loitering | default(false) }}"
            has_zones: "{{ (e.entered_zones | default([])) | length > 0 }}"
            has_clip: "{{ e.has_clip | default(false) }}"
            has_snapshot: "{{ e.has_snapshot | default(false) }}"
            is_active: "{{ e.active | default(false) }}"
            has_severity: "{{ e.max_severity == 'alert' }}"
            snapshot_camera: "{{ e.snapshot.camera | default('') }}"
            camera_match: "{{ snapshot_camera == review_camera_id }}"
            event_path: "{{ e.path | default(review_full_event_id) }}"
            should_notify: >-
              {{ (not initial_notification_sent)
                 and has_severity
                 and has_clip
                 and has_snapshot
                 and has_pending 
                 and has_zones
                 and camera_match }}

        # 4) Log what we've got
        - service: logbook.log
          data:
            name: "Frigate Debug - Event Received"
            message: >
              Event: {{ review_full_event_id }}
              Camera: {{ review_camera_id }}
              Snapshot Camera: {{ snapshot_camera }}
              Camera Match: {{ camera_match }}
              Pending Loitering: {{ has_pending }}
              Has Clip: {{ has_clip }}
              Has Snapshot: {{ has_snapshot }}
              Severity OK: {{ has_severity }}
              Should Notify: {{ should_notify }}

        # Check if we should send notification
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ should_notify }}"
              sequence:
                - service: logbook.log
                  data:
                    name: "Frigate Debug - Condition Check"
                    message: >
                      Event {{ review_full_event_id }} ({{ review_camera_id }})
                      Object: {{ e.label }} ({{ e.sub_label }})
                      Conditions:
                      - Initial notification not sent: {{ not initial_notification_sent }}
                      - Has severity: {{ has_severity }}
                      - Has pending loitering: {{ has_pending }}
                      - Has clip: {{ has_clip }}
                      - Has snapshot: {{ has_snapshot }}
                      - Is active: {{ is_active }}
                      Final decision: {{ should_notify }}

                - device_id: !input notify_device
                  domain: mobile_app
                  type: notify
                  message: >-
                    {% if not initial_notification_sent %}
                      A {{ e.label | title }} was detected on {{ review_camera_id }}.
                    {% else %}
                      Additional object(s) detected: {{ new_objects | join(", ") | title }} on {{ review_camera_id }}.
                    {% endif %}
                  data:
                    tag: "{{ review_full_event_id }}"
                    title: "Frigate Detection"
                    image: "{{ base_url }}/api/frigate/notifications/{{ event_path }}/thumbnail.jpg"
                    clickAction: "{{ base_url }}/api/frigate/notifications/{{ event_path }}/thumbnail.jpg"
                    tap_action:
                      action: "URI"
                      uri: "{{ base_url }}/api/frigate/notifications/{{ event_path }}/thumbnail.jpg"
                    importance: "{{ 'low' if initial_notification_sent else 'high' }}"
                    priority: "{{ 'low' if initial_notification_sent else 'high' }}"
                    sound: "{{ 'none' if initial_notification_sent else 'default' }}"
                    critical: "{{ critical_alert }}"
                    when: "{{ e.start_time|int }}"
                    entity_id: "camera.{{ review_camera_id | replace('-','_') | lower }}"
                    actions:
                      - label: "Open Frigate Dashboard"
                        title: "Open Frigate Dashboard"
                        action: "URI"
                        uri: "{{ base_url }}/api/hassio_ingress/frigate"
                      - label: "View Clip"
                        title: "View Clip"
                        action: "URI"
                        uri: "{{ base_url }}/api/frigate/notifications/{{ event_path }}/clip.mp4"

                - variables:
                    initial_notification_sent: true
                    notification_time: "{{ now() }}"

                - choose:
                    - conditions: "{{ enable_homekit }}"
                      sequence:
                        - service: input_boolean.turn_on
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ review_camera_id|lower }}_alert
                        - delay: 5
                        - service: input_boolean.turn_off
                          target:
                            entity_id: >
                              input_boolean.frigate_{{ review_camera_id|lower }}_alert

      until: >-
        {% if trigger is none %}
          true
        {% elif initial_notification_sent and notification_time %}
          {{ (now() - notification_time).total_seconds() > (cooldown * 60) }}
        {% endif %}

